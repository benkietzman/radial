// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Base
// author     : Ben Kietzman
// begin      : 2022-04-19
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_BASE_
#define _RADIAL_BASE_
// {{{ includes
#include <arpa/inet.h>
#include <cerrno>
#include <cstring>
#include <fstream>
#include <libssh/libssh.h>
#include <list>
#include <map>
#include <mutex>
#include <netdb.h>
#include <poll.h>
#include <semaphore.h>
#include <sstream>
#include <string>
#include <sys/socket.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/utsname.h>
#include <thread>
#include <unistd.h>
#include <vector>
using namespace std;
#include <Central>
#include <File>
#include <Json>
#include <ServiceJunction>
#include <StringManip>
#include <Terminal>
#include <Utility>
#include <Warden>
using namespace common;
// }}}
extern "C++"
{
namespace radial
{
// {{{ structs
// {{{ radialInterface
struct radialInterface
{
  bool bRespawn;
  bool bRestricted;
  bool bShutdown;
  int fdRead;
  int fdWrite;
  pid_t nPid;
  string strAccessFunction;
  string strBuffers[2];
  string strCommand;
};
// }}}
// {{{ radialLink
struct radialLink
{
  addrinfo hints;
  addrinfo *result;
  addrinfo *rp;
  bool bAuthenticated;
  bool bRetry;
  int fdConnecting;
  int fdSocket;
  list<string> responses;
  map<string, radialInterface *> interfaces;
  size_t unUnique;
  SSL *ssl;
  string strBuffers[2];
  string strNode;
  string strPort;
  string strServer;
};
// }}}
// }}}
// {{{ Base
class Base
{
  protected:
  bool m_bShutdown;
  char **m_argv;
  int m_argc;
  list<radialLink *> m_links;
  map<string, radialInterface *> m_interfaces;
  mutex m_mutexBase;
  size_t m_unMonitor;
  size_t m_unThreads;
  string m_strApplication;
  string m_strData;
  string m_strNode;
  string m_strWarden;
  time_t m_CMonitor[2];
  unsigned long m_ulMaxResident;
  Central *m_pCentral;
  File m_file;
  ServiceJunction *m_pJunction;
  StringManip m_manip;
  Utility *m_pUtility;
  Warden *m_pWarden;

  size_t monitor(string &strMessage);
  void msleep(const unsigned long ulMilliSec);
  void threadDecrement();
  void threadIncrement();

  public:
  Base(int argc, char **argv);
  ~Base();
  bool empty(Json *ptJson, const string strField);
  string esc(const string strValue);
  bool exist(Json *ptJson, const string strField);
  void setShutdown();
  bool shutdown();
};
// }}}
}
}
#endif
