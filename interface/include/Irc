// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Irc
// author     : Ben Kietzman
// begin      : 2022-12-27
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_IRC_
#define _RADIAL_IRC_
// {{{ includes
#include "Interface"
#include <libssh/libssh.h>
// }}}
extern "C++"
{
namespace radial
{
// {{{ Irc
class Irc : public Interface
{
  protected:
  bool m_bEnabled;
  list<string> m_channels;
  list<string> m_messages;
  map<string, list<string> > m_sshClients;
  mutex m_mutex;
  string m_strNick;
  string m_strPort;
  string m_strServer;
  time_t m_CMonitorChannelsModify;
  Json *m_ptMonitor;

  void analyze(const string strNick, const string strTarget, const string strMessage);
  void analyze(string strPrefix, const string strTarget, const string strUserID, const string strIdent, const string strFirstName, const string strLastName, const bool bAdmin, map<string, bool> &auth, stringstream &ssData);
  void analyze(string strPrefix, const string strTarget, const string strUserID, const string strIdent, const string strFirstName, const string strLastName, const bool bAdmin, map<string, bool> &auth, Json *ptData);
  void analyzer(string strPrefix, const string strTarget, const string strUserID, const string strIdent, const string strData);
  void chat(const string strTarget, const string strMessage);
  void enable(const string strNick);
  bool enabled();
  void disable();
  bool isLocalAdmin(const string strUserID, string strApplication, const bool bAdmin, map<string, bool> auth);
  void join(const string strChannel);
  void lock();
  bool message(string &strMessage);
  Json *monitor();
  void monitorChannels(string strPrefix);
  void part(const string strChannel);
  void push(const string strMessage);
  void quit();
  void ssh(string strPrefix, const string strTarget, const string strUserID, const string strServer, const string strPort, const string strUser, const string strPassword);
  int sshAuthenticateNone(ssh_session session);
  int sshAuthenticatePassword(ssh_session session, const string strPassword);
  int sshAuthenticateKbdint(ssh_session session, const string strPassword);
  void unlock();
  string var(const string strName, Json *ptData);

  public:
  Irc(string strPrefix, int argc, char **argv, void (*pCallback)(string, Json *, const bool));
  ~Irc();
  void autoMode(string strPrefix, const string strOldMaster, const string strNewMaster);
  void bot(string strPrefix);
  void callback(string strPrefix, Json *ptJson, const bool bResponse);
};
// }}}
}
}
#endif
