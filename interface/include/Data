// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Data
// author     : Ben Kietzman
// begin      : 2025-03-11
// copyright  : Ben Kietzman
// email      : ben@kietzman.org
#ifndef _RADIAL_DATA_
#define _RADIAL_DATA_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Data
class Data : public Interface
{
  protected:
  char *m_pszBuffer;
  map<string, time_t> m_dataTokens; 
  map<string, Json *> m_dataRequests;
  map<string, bool (Data::*)(radialUser &, string &)> m_functions;
  mutex m_mutex;
  sem_t m_semBuffer;
  thread *m_pThreadDataAccept;
  thread *m_pThreadInotify;
  thread *m_pThreadSchedule;
  vector<int> m_buffers;
  Json *m_c;

  void dataAccept(string strPrefix);
  void dataError(int &fd, const string e);
  void dataSocket(string strPrefix, int fdSocket, SSL_CTX *ctx);
  inline bool dirAdd(radialUser &d, string &e) {return token(d, e);};
  inline bool dirList(radialUser &d, string &e) {return token(d, e);};
  inline bool dirRemove(radialUser &d, string &e) {return token(d, e);};
  inline bool fileAppend(radialUser &d, string &e) {return token(d, e);};
  inline bool fileRead(radialUser &d, string &e) {return token(d, e);};
  inline bool fileRemove(radialUser &d, string &e) {return token(d, e);};
  inline bool fileWrite(radialUser &d, string &e) {return token(d, e);};
  void load(string strPrefix, const bool bSilent = false);
  void schedule(string strPrefix);
  bool token(radialUser &d, string &e);

  public:
  Data(string strPrefix, int argc, char **argv, void (*pCallback)(string, const string, const bool), void (*pCallbackInotify)(string, const string, const string));
  ~Data();
  void callback(string strPrefix, const string strPacket, const bool bResponse);
  void callbackInotify(string strPrefix, const string strPath, const string strFile);
};
// }}}
}
}
#endif
