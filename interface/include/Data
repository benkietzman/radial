// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Database
// author     : Ben Kietzman
// begin      : 2025-03-11
// copyright  : Ben Kietzman
// email      : ben@kietzman.org
#ifndef _RADIAL_DATA_
#define _RADIAL_DATA_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Data
class Data : public Interface
{
  protected:
  char *m_pszBuffer;
  map<string, time_t> m_dataTokens; 
  map<string, Json *> m_dataRequests;
  map<string, bool (Data::*)(radialUser &, string &)> m_functions;
  mutex m_mutex;
  sem_t m_semBuffer;
  thread *m_pThreadDataAccept;
  thread *m_pThreadInotify;
  thread *m_pThreadSchedule;
  vector<int> m_buffers;
  Json *m_c;

  void dataAccept(string strPrefix);
  bool dataConnect(radialUser &d, const string h, SSL_CTX **ctx, SSL **ssl, vector<string> &buffers, string &e);
  void dataDisconnect(SSL_CTX *ctx, SSL *ssl);
  void dataError(int &fd, const string e);
  void dataOkay(int &fd);
  void dataResponse(const string t, int &fd, const size_t unBuffer);
  void dataSocket(string strPrefix, int fdSocket, SSL_CTX *ctx);
  void dataStatus(int &fd, const bool b, const string e = "");
  void load(string strPrefix, const bool bSilent = false);
  void schedule(string strPrefix);
  bool token(radialUser &d, string &e);

  public:
  Data(string strPrefix, int argc, char **argv, void (*pCallback)(string, const string, const bool), void (*pCallbackInotify)(string, const string, const string));
  ~Data();
  void autoMode(string strPrefix, const string strOldMaster, const string strNewMaster);
  void callback(string strPrefix, const string strPacket, const bool bResponse);
  void callbackInotify(string strPrefix, const string strPath, const string strFile);
};
// }}}
}
}
#endif
