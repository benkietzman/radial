// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Interface
// author     : Ben Kietzman
// begin      : 2022-04-19
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_INTERFACE_
#define _RADIAL_INTERFACE_
// {{{ includes
#include "../../include/Base"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Interface
class Interface : public Base
{
  protected:
  void (*m_pCallback)(string, Json *, const bool);
  list<string> m_responses;
  map<string, int> m_waiting;
  mutex m_mutex;
  string m_strBuffers[2];
  string m_strName;

  void alert(const string strMessage);
  bool auth(Json *ptJson, string &strError);
  void dbfree(list<map<string, string> > *rows);
  list<map<string, string> > *dbquery(const string strDatabase, const string strQuery, string &strError);
  list<map<string, string> > *dbquery(const string strDatabase, const string strQuery, unsigned long long &ullRows, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, string &strID, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, unsigned long long &ullID, unsigned long long &ullRows, string &strError);
  void log(const string strFunction, const string strMessage);
  void log(const string strMessage);
  void monitor(string strPrefix);
  bool mysql(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strType, const string strQuery, unsigned long long &ullID, unsigned long long &ullRows, list<map<string, string> > &rows, string &strError);
  bool mysqlQuery(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strQuery, unsigned long long &ullRows, list<map<string, string> > &rows, string &strError);
  bool mysqlUpdate(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strQuery, unsigned long long &ullID, unsigned long long &ullRows, string &strError);
  void notify(const string strMessage);
  void response(Json *ptJson);
  bool storage(const string strFunction, list<string> keys, Json *ptJson, string &strError);
  bool storageAdd(const list<string> keys, Json *ptJson, string &strError);
  bool storageRemove(const list<string> keys, string &strError);
  bool storageRetrieve(Json *ptJson, string &strError);
  bool storageRetrieve(const list<string> keys, Json *ptJson, string &strError);
  bool storageRetrieveKeys(const list<string> keysIn, list<string> &keysOut, string &strError);
  bool storageUpdate(const list<string> keys, Json *ptJson, string &strError);
  void target(Json *ptJson, const bool bWait = true);
  void target(const string strTarget, Json *ptJson, const bool bWait = true);
  bool target(Json *ptJson, string &strError);
  bool target(const string strTarget, Json *ptJson, string &strError);

  public:
  Interface(string strPrefix, const string strName, int argc, char **argv, void (*pCallback)(string, Json *, const bool));
  ~Interface();
  void process(string strPrefix);
};
// }}}
}
}
#endif
