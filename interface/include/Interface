// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Interface
// author     : Ben Kietzman
// begin      : 2022-04-19
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_INTERFACE_
#define _RADIAL_INTERFACE_
// {{{ includes
#include "../../include/Base"
// }}}
extern "C++"
{
namespace radial
{
// {{{ structs
// {{{ radialUser
struct radialUser
{
  bool g;
  map<string, bool> auth;
  string u;
  Json *p;
};
// }}}
// }}}
// {{{ Interface
class Interface : public Base
{
  protected:
  bool m_bMaster;
  bool m_bMasterSettled;
  bool m_bResponse;
  int m_fdResponse[2];
  list<string> m_responses;
  map<string, int> m_waiting;
  map<string, size_t> m_throughput;
  mutex m_mutexShare;
  string m_strAesSecret;
  string m_strBuffers[2];
  string m_strJwtSecret;
  string m_strJwtSigner;
  string m_strMaster;
  string m_strName;
  void (*m_pAutoModeCallback)(string, const string, const string);
  void (*m_pCallback)(string, const string, const bool);

  void alert(const string strMessage);
  bool auth(Json *ptJson, string &strError);
  bool centralmon(const string strServer, const string strProcess, Json *ptData, string &strError);
  bool chat(const string strTarget, const string strMessage);
  bool chat(const string strTarget, const string strMessage, string &strError);
  bool command(const string strCommand, list<string> arguments, const string strInput, string &strOutput, size_t &unDuration, string &strError, const time_t CTimeout = 0);
  bool command(const string strCommand, list<string> arguments, Json *ptInput, Json *ptOutput, size_t &unDuration, string &strError, const time_t CTimeout = 0);
  bool cron(time_t &CTime, const string strValue, string &strError);
  bool cronParse(const size_t unType, const string strValue, list<int> &value, string &strError);
  bool cronParseComma(const size_t unType, const string strValue, list<int> &value, string &strError);
  bool cronParseDow(string &strValue, string &strError);
  bool cronParseHyphen(const size_t unType, string strValue, list<int> &value, string &strError);
  bool cronParseMonth(string &strValue, string &strError);
  bool cronParseValue(const size_t unType, string strValue, int &nValue, string &strError);
  bool db(const string f, Json *d, string &e);
  bool db(const string f, Json *d, string &q, string &e);
  bool db(const string f, Json *d, string &id, string &q, string &e);
  bool db(const string f, Json *i, list<map<string, string> > &rs, string &e);
  bool db(const string f, Json *i, list<map<string, string> > &rs, string &q, string &e);
  bool db(const string f, Json *i, map<string, string> &r, string &e);
  bool db(const string f, Json *i, map<string, string> &r, string &q, string &e);
  bool db(const string f, Json *i, Json *o, string &e);
  bool db(const string f, Json *i, Json *o, string &q, string &e);
  bool db(const string f, Json *i, Json *o, string &id, string &q, string &e);
  void dbfree(list<map<string, string> > *rows);
  list<map<string, string> > *dbquery(const string strDatabase, const string strQuery, string &strError);
  list<map<string, string> > *dbquery(const string strDatabase, const string strQuery, unsigned long long &ullRows, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, string &strID, string &strError);
  bool dbupdate(const string strDatabase, const string strUpdate, unsigned long long &ullID, unsigned long long &ullRows, string &strError);
  void email(const string strFrom, const string strTo, const string strSubject, const string strText, const string strHtml, string &strError);
  void email(const string strFrom, list<string> to, const string strSubject, const string strText, const string strHtml, string &strError);
  void email(const string strFrom, list<string> to, list<string> cc, list<string> bcc, const string strSubject, const string strText, const string strHtml, map<string, string> file, string &strError);
  string getUserEmail(radialUser &d);
  string getUserFirstName(radialUser &d);
  string getUserLastName(radialUser &d);
  string getUserName(radialUser &d);
  bool interfaceAdd(const string strInterface, string &strError);
  bool interfaceAdd(const string strNode, const string strInterface, string &strError);
  bool interfaceRemove(const string strInterface, string &strError);
  bool interfaceRemove(const string strNode, const string strInterface, string &strError);
  void interfaces(string strPrefix, Json *ptJson);
  bool isApplicationDeveloper(radialUser &d, string &e);
  bool isServerAdmin(radialUser &d, string &e);
  bool isLocalAdmin(radialUser &d, const string strApplication = "", const bool bAny = false, const bool bLocal = false);
  bool isMaster();
  bool isMasterSettled();
  bool isValid(radialUser &d, const string strApplication = "");
  bool junction(list<Json *> in, list<Json *> &out, string &strError);
  bool jwt(const string strSigner, const string strSecret, string &strPayload, Json *ptPayload, string &strError);
  void keyRemovals(Json *ptJson);
  void links(string strPrefix, Json *ptJson);
  bool live(const string strApplication, const string strUser, map<string, string> message, string &strError);
  bool live(const string strApplication, const string strUser, Json *ptMessage, string &strError);
  void log(const string strFunction, const string strMessage);
  void log(const string strMessage);
  void logger(const string strFunction, map<string, string> label, const string strMessage);
  string master();
  bool mysql(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strType, const string strQuery, unsigned long long &ullID, unsigned long long &ullRows, list<map<string, string> > &rows, string &strError);
  bool mysqlQuery(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strQuery, unsigned long long &ullRows, list<map<string, string> > &rows, string &strError);
  bool mysqlUpdate(const string strServer, const unsigned int unPort, const string strUser, const string strPassword, const string strDatabase, const string strQuery, unsigned long long &ullID, unsigned long long &ullRows, string &strError);
  void notify(const string strMessage);
  void ny(Json *ptJson, const string strField);
  bool page(const string strType, const string strTarget, const string strMessage, string &strError);
  bool pageGroup(const string strGroup, const string strMessage, string &strError);
  bool pageUser(const string strUser, const string strMessage, string &strError);
  bool storage(const string strFunction, list<string> keys, Json *ptJson, string &strError);
  bool storageAdd(const list<string> keys, Json *ptJson, string &strError);
  bool storageRemove(const list<string> keys, string &strError);
  bool storageRetrieve(Json *ptJson, string &strError);
  bool storageRetrieve(const list<string> keys, Json *ptJson, string &strError);
  bool storageRetrieveKeys(const list<string> keysIn, list<string> &keysOut, string &strError);
  bool storageUpdate(const list<string> keys, Json *ptJson, string &strError);
  void throughput(const string strType, const size_t unThroughput = 1);
  bool user(radialUser &d, string &e);
  void userDeinit(radialUser &d);
  void userInit(radialUser &d);
  void userInit(radialUser &i, radialUser &o);
  void userInit(Json *ptJson, radialUser &d);

  public:
  Interface(string strPrefix, const string strName, int argc, char **argv, void (*pCallback)(string, const string, const bool));
  ~Interface();
  void hub(radialPacket &p, const bool bWait = true);
  void hub(const string strTarget, Json *ptJson, const bool bWait = true);
  void hub(Json *ptJson, const bool bWait = true);
  bool hub(const string strTarget, Json *ptJson, string &strError);
  bool hub(Json *ptJson, string &strError);
  void process(string strPrefix);
  void setAutoMode(void (*pCallback)(string, const string, const string));
};
// }}}
}
}
#endif
