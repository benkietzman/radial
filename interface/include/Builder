// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Builder
// author     : Ben Kietzman
// begin      : 2025-10-13
// copyright  : Ben Kietzman
// email      : ben@kietzman.org
#ifndef _RADIAL_BUILD_
#define _RADIAL_BUILD_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Builder
class Builder : public Interface
{
  protected:
  map<string, bool (Builder::*)(radialUser &, string &)> m_functions;
  map<string, bool (Builder::*)(string &, radialUser &, list<string> &, string &, const bool)> m_packages;
  mutex m_mutex;
  string m_strPassword;
  string m_strPrivateKey;
  string m_strPublicKey;
  string m_strSudo;
  string m_strUser;
  thread *m_pThreadInotify;
  Json *m_c;

  bool cmdChgrp(string &s, const string p, const string g, list<string> &q, string &e, const bool r = false);
  bool cmdChmod(string &s, const string p, const string m, list<string> &q, string &e, const bool r = false);
  bool cmdChown(string &s, const string p, const string u, list<string> &q, string &e, const bool r = false);
  bool cmdChsh(string &s, const string u, const string i, list<string> &q, string &e, const bool r = false);
  bool cmdDir(string &s, const string p, list<string> &q, string &e);
  bool cmdMkdir(string &s, const string p, list<string> &q, string &e, const bool r = false);
  bool cmdRmdir(string &s, const string p, list<string> &q, string &e, const bool r = false);
  bool cmdSudo(string &s, const string c, list<string> &q, string &e);
  bool confPkg(const string p, Json *c, string &e);
  bool connect(const string strServer, const string strPort, const string strUser, const string strPassword, const string strPrivateKey, string &s, list<string> &q, string &e);
  bool construct(radialUser &u, string &e);
  void cred(string strPrefix, const bool bSilent = false);
  bool destruct(radialUser &u, string &e);
  bool disconnect(string &s, string &e);
  void init(radialUser &u, string &strUser, string &strPassword, string &strPrivateKey, string &strSudo);
  bool install(radialUser &u, string &e);
  string last(const string d);
  void load(string strPrefix, const bool bSilent = false);
  bool pkgSrc(string &s, radialUser &u, list<string> &q, string &e, const bool a);
  bool pkgTest(string &s, radialUser &u, list<string> &q, string &e, const bool a);
  bool remove(radialUser &u, string &e);
  bool send(string &s, const string c, list<string> &q, string &e);
  string strip(const string v);

  public:
  Builder(string strPrefix, int argc, char **argv, void (*pCallback)(string, const string strPacket, const bool), void (*pCallbackInotify)(string, const string, const string));
  ~Builder();
  void callback(string strPrefix, const string strPacket, const bool bResponse);
  void callbackInotify(string strPrefix, const string strPath, const string strFile);
};
// }}}
}
}
#endif
