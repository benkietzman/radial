// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Terminal
// author     : Ben Kietzman
// begin      : 2023-12-27
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_TERMINAL_
#define _RADIAL_TERMINAL_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ structs
// {{{ radialTerminal
struct radialTerminal
{
  int fdSocket;
  size_t unActive;
  time_t CTime;
  common::Terminal t;
};
// }}}
// }}}
// {{{ Terminal
class Terminal : public Interface
{
  protected:
  bool (*m_pCallbackAddon)(const string, radialUser &, string &, bool &);
  map<string, bool (Terminal::*)(radialUser &, string &)> m_functions;
  map<string, radialTerminal *> m_sessions;
  mutex m_mutex;

  bool connect(radialUser &d, string &e);
  bool ctrl(radialUser &d, string &e);
  bool disconnect(radialUser &d, string &e);
  bool down(radialUser &d, string &e);
  bool enter(radialUser &d, string &e);
  bool escape(radialUser &d, string &e);
  bool function(radialUser &d, string &e);
  bool getSocketTimeout(radialUser &d, string &e);
  bool home(radialUser &d, string &e);
  bool key(radialUser &d, string &e);
  bool keypadEnter(radialUser &d, string &e);
  bool left(radialUser &d, string &e);
  void post(radialUser &d, radialTerminal *t);
  bool pre(radialUser &d, radialTerminal *t, bool &w, size_t &c, string &k, string &e);
  bool right(radialUser &d, string &e);
  bool screen(radialUser &d, string &e);
  bool send(radialUser &d, string &e);
  bool setSocketTimeout(radialUser &d, string &e);
  bool shiftFunction(radialUser &d, string &e);
  bool tab(radialUser &d, string &e);
  bool up(radialUser &d, string &e);
  bool wait(radialUser &d, string &e);

  public:
  Terminal(string strPrefix, int argc, char **argv, void (*pCallback)(string, const string strPacket, const bool));
  ~Terminal();
  void callback(string strPrefix, const string strPacket, const bool bResponse);
  void schedule(string strPrefix);
  void setCallbackAddon(bool (*pCallback)(const string, radialUser &, string &, bool &));
};
// }}}
}
}
#endif
