// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Central
// author     : Ben Kietzman
// begin      : 2023-02-18
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_CENTRAL_
#define _RADIAL_CENTRAL_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Central
class Central : public Interface
{
  protected:
  map<string, bool (Central::*)(string, Json *, Json *, string &)> m_functions;
  Json *m_ptCred;

  bool accountType(string strP, Json *ptI, Json *ptO, string &strE);
  bool accountTypes(string strP, Json *ptI, Json *ptO, string &strE);
  bool application(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAccount(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAccountAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAccountEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAccountRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAccountsByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationBotLink(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationBotLinkAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationBotLinkRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationBotLinksByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationDepend(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationDependAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationDependRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssue(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueClose(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueCommentAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueCommentEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueComments(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssueEmail(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssues(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationIssuesByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationNotify(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applications(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationsByServerID(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationsByUserID(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServer(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerDetail(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerDetailAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerDetailEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerDetailRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerDetails(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationServerRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationUser(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationUserAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationUserEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationUserRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool applicationUsersByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool botLinkRemoteSystem(string strP, Json *ptI, Json *ptO, string &strE);
  bool botLinkRemoteSystems(string strP, Json *ptI, Json *ptO, string &strE);
  bool contactType(string strP, Json *ptI, Json *ptO, string &strE);
  bool dependentsByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool isApplicationDeveloper(string strP, Json *ptI, Json *ptO, string &strE);
  bool isServerAdmin(string strP, Json *ptI, Json *ptO, string &strE);
  bool loginType(string strP, Json *ptI, Json *ptO, string &strE);
  bool loginTypes(string strP, Json *ptI, Json *ptO, string &strE);
  bool menuAccess(string strP, Json *ptI, Json *ptO, string &strE);
  bool menuAccesses(string strP, Json *ptI, Json *ptO, string &strE);
  bool notifyPriorities(string strP, Json *ptI, Json *ptO, string &strE);
  bool notifyPriority(string strP, Json *ptI, Json *ptO, string &strE);
  void noyes(Json *ptJson, const string strField);
  bool packageType(string strP, Json *ptI, Json *ptO, string &strE);
  bool packageTypes(string strP, Json *ptI, Json *ptO, string &strE);
  bool server(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverDetailsByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverNotify(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool servers(string strP, Json *ptI, Json *ptO, string &strE);
  bool serversByApplicationID(string strP, Json *ptI, Json *ptO, string &strE);
  bool serversByUserID(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverUser(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverUserAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverUserEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverUserRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool serverUsersByServerID(string strP, Json *ptI, Json *ptO, string &strE);
  bool user(string strP, Json *ptI, Json *ptO, string &strE);
  bool userAdd(string strP, Json *ptI, Json *ptO, string &strE);
  bool userEdit(string strP, Json *ptI, Json *ptO, string &strE);
  bool userRemove(string strP, Json *ptI, Json *ptO, string &strE);
  bool users(string strP, Json *ptI, Json *ptO, string &strE);

  public:
  Central(string strP, int argc, char **argv, void (*pCallback)(string, Json *, const bool));
  ~Central();
  void callback(string strPrefix, Json *ptJson, const bool bResponse);
};
// }}}
}
}
#endif
