// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Central
// author     : Ben Kietzman
// begin      : 2023-02-18
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_CENTRAL_
#define _RADIAL_CENTRAL_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ structs
// {{{ data
struct data
{
  bool g;
  map<string, bool> auth;
  string u;
  Json *p;
};
// }}}
// }}}
// {{{ Central
class Central : public Interface
{
  protected:
  map<string, bool (Central::*)(data &, string &)> m_functions;
  string m_strAesSecret;
  string m_strJwtSecret;
  string m_strJwtSigner;
  Json *m_ptCred;

  bool accountType(data &d, string &e);
  bool accountTypes(data &d, string &e);
  bool application(data &d, string &e);
  bool applicationAccount(data &d, string &e);
  bool applicationAccountAdd(data &d, string &e);
  bool applicationAccountEdit(data &d, string &e);
  bool applicationAccountRemove(data &d, string &e);
  bool applicationAccountsByApplicationID(data &d, string &e);
  bool applicationAdd(data &d, string &e);
  bool applicationDepend(data &d, string &e);
  bool applicationDependAdd(data &d, string &e);
  bool applicationDependRemove(data &d, string &e);
  bool applicationEdit(data &d, string &e);
  bool applicationIssue(data &d, string &e);
  bool applicationIssueAdd(data &d, string &e);
  bool applicationIssueClose(data &d, string &e);
  bool applicationIssueCommentAdd(data &d, string &e);
  bool applicationIssueCommentEdit(data &d, string &e);
  bool applicationIssueComments(data &d, string &e);
  bool applicationIssueEdit(data &d, string &e);
  bool applicationIssueEmail(data &d, string &e);
  bool applicationIssues(data &d, string &e);
  bool applicationIssuesByApplicationID(data &d, string &e);
  bool applicationNotify(data &d, string &e);
  bool applicationRemove(data &d, string &e);
  bool applications(data &d, string &e);
  bool applicationsByServerID(data &d, string &e);
  bool applicationsByUserID(data &d, string &e);
  bool applicationServer(data &d, string &e);
  bool applicationServerAdd(data &d, string &e);
  bool applicationServerDetail(data &d, string &e);
  bool applicationServerDetailAdd(data &d, string &e);
  bool applicationServerDetailEdit(data &d, string &e);
  bool applicationServerDetailRemove(data &d, string &e);
  bool applicationServerDetails(data &d, string &e);
  bool applicationServerRemove(data &d, string &e);
  bool applicationUser(data &d, string &e);
  bool applicationUserAdd(data &d, string &e);
  bool applicationUserEdit(data &d, string &e);
  bool applicationUserRemove(data &d, string &e);
  bool applicationUsersByApplicationID(data &d, string &e);
  bool contactType(data &d, string &e);
  void dbf(list<map<string, string> > *get);
  list<map<string, string> > *dbq(const string strQuery, string &e);
  bool dbu(const string strQuery, string &e);
  void deinit(data &d);
  bool dependentsByApplicationID(data &d, string &e);
  bool empty(Json *ptJson, const string strField);
  string esc(const string strValue);
  bool exist(Json *ptJson, const string strField);
  string getUserEmail(data &d);
  string getUserFirstName(data &d);
  string getUserLastName(data &d);
  string getUserName(data &d);
  void init(data &d);
  void init(data &i, data &o);
  bool isApplicationDeveloper(data &d, string &e);
  bool isServerAdmin(data &d, string &e);
  bool loginType(data &d, string &e);
  bool loginTypes(data &d, string &e);
  void merge(Json *ptOuter, Json *ptInner);
  bool menuAccess(data &d, string &e);
  bool menuAccesses(data &d, string &e);
  bool notifyPriorities(data &d, string &e);
  bool notifyPriority(data &d, string &e);
  void ny(Json *ptJson, const string strField);
  bool packageType(data &d, string &e);
  bool packageTypes(data &d, string &e);
  void rm(Json *ptJson, const string strField);
  bool server(data &d, string &e);
  bool serverAdd(data &d, string &e);
  bool serverDetailsByApplicationID(data &d, string &e);
  bool serverEdit(data &d, string &e);
  bool serverNotify(data &d, string &e);
  bool serverRemove(data &d, string &e);
  bool servers(data &d, string &e);
  bool serversByApplicationID(data &d, string &e);
  bool serversByUserID(data &d, string &e);
  bool serverUser(data &d, string &e);
  bool serverUserAdd(data &d, string &e);
  bool serverUserEdit(data &d, string &e);
  bool serverUserRemove(data &d, string &e);
  bool serverUsersByServerID(data &d, string &e);
  bool user(data &d, string &e);
  bool userAdd(data &d, string &e);
  bool userEdit(data &d, string &e);
  bool userRemove(data &d, string &e);
  bool users(data &d, string &e);

  public:
  Central(string, int argc, char **argv, void (*pCallback)(string, Json *, const bool));
  ~Central();
  void callback(string strPrefix, Json *ptJson, const bool bResponse);
};
// }}}
}
}
#endif
