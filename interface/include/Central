// -*- C++ -*-
// Radial
// -------------------------------------
// file       : Central
// author     : Ben Kietzman
// begin      : 2023-02-18
// copyright  : kietzman.org
// email      : ben@kietzman.org
/***********************************************************************
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
***********************************************************************/
#ifndef _RADIAL_CENTRAL_
#define _RADIAL_CENTRAL_
// {{{ includes
#include "Interface"
// }}}
extern "C++"
{
namespace radial
{
// {{{ Central
class Central : public Interface
{
  protected:
  bool m_bLoadReminders;
  bool m_bMonitorUpdate;
  bool (*m_pCallbackAddon)(const string, radialUser &, string &, bool &);
  map<string, bool (Central::*)(radialUser &, string &)> m_functions;
  mutex m_mutex;
  thread *m_pThreadSchedule;

  bool accountType(radialUser &d, string &e);
  bool accountTypes(radialUser &d, string &e);
  bool applicationAccount(radialUser &d, string &e);
  bool applicationAccountAdd(radialUser &d, string &e);
  bool applicationAccountEdit(radialUser &d, string &e);
  bool applicationAccountRemove(radialUser &d, string &e);
  bool applicationAccountsByApplicationID(radialUser &d, string &e);
  bool applicationAdd(radialUser &d, string &e);
  bool applicationDepend(radialUser &d, string &e);
  bool applicationDependAdd(radialUser &d, string &e);
  bool applicationDependRemove(radialUser &d, string &e);
  bool applicationEdit(radialUser &d, string &e);
  bool applicationGroup(radialUser &d, string &e);
  bool applicationGroupAdd(radialUser &d, string &e);
  bool applicationGroupRemove(radialUser &d, string &e);
  bool applicationIssue(radialUser &d, string &e);
  bool applicationIssueAdd(radialUser &d, string &e);
  bool applicationIssueClose(radialUser &d, string &e);
  bool applicationIssueComment(radialUser &d, string &e);
  bool applicationIssueCommentAdd(radialUser &d, string &e);
  bool applicationIssueCommentEdit(radialUser &d, string &e);
  bool applicationIssueComments(radialUser &d, string &e);
  bool applicationIssueEdit(radialUser &d, string &e);
  bool applicationIssueEmail(radialUser &d, string &e);
  bool applicationIssues(radialUser &d, string &e);
  bool applicationIssuesByApplicationID(radialUser &d, string &e);
  bool applicationNotify(radialUser &d, string &e);
  bool applicationRemove(radialUser &d, string &e);
  bool applicationRepo(radialUser &d, string &e);
  bool applicationRepoAdd(radialUser &d, string &e);
  bool applicationRepoEdit(radialUser &d, string &e);
  bool applicationRepoRemove(radialUser &d, string &e);
  bool applicationReposByApplicationID(radialUser &d, string &e);
  bool applications(radialUser &d, string &e);
  bool applicationsByGroupID(radialUser &d, string &e);
  bool applicationsByServerID(radialUser &d, string &e);
  bool applicationsByUserID(radialUser &d, string &e);
  bool applicationServer(radialUser &d, string &e);
  bool applicationServerAdd(radialUser &d, string &e);
  bool applicationServerDetail(radialUser &d, string &e);
  bool applicationServerDetailAdd(radialUser &d, string &e);
  bool applicationServerDetailEdit(radialUser &d, string &e);
  bool applicationServerDetailRemove(radialUser &d, string &e);
  bool applicationServerDetails(radialUser &d, string &e);
  bool applicationServerRemove(radialUser &d, string &e);
  bool applicationUser(radialUser &d, string &e);
  bool applicationUserAdd(radialUser &d, string &e);
  bool applicationUserEdit(radialUser &d, string &e);
  bool applicationUserRemove(radialUser &d, string &e);
  bool applicationUsersByApplicationID(radialUser &d, string &e);
  bool contactType(radialUser &d, string &e);
  bool contactTypes(radialUser &d, string &e);
  void dbf(list<map<string, string> > *get);
  list<map<string, string> > *dbq(const string strQuery, string &e);
  bool dbu(const string strQuery, string &e);
  bool dbu(const string strQuery, string &strID, string &e);
  bool dependentsByApplicationID(radialUser &d, string &e);
  bool group(radialUser &d, string &e);
  bool groupAdd(radialUser &d, string &e);
  bool groupEdit(radialUser &d, string &e);
  bool groupNotify(radialUser &d, string &e);
  bool groupRemove(radialUser &d, string &e);
  bool groups(radialUser &d, string &e);
  bool groupsByApplicationID(radialUser &d, string &e);
  bool groupsByServerID(radialUser &d, string &e);
  bool groupsByUserID(radialUser &d, string &e);
  bool groupUser(radialUser &d, string &e);
  bool groupUserAdd(radialUser &d, string &e);
  bool groupUserEdit(radialUser &d, string &e);
  bool groupUserRemove(radialUser &d, string &e);
  bool groupUsersByGroupID(radialUser &d, string &e);
  bool loginTypes(radialUser &d, string &e);
  void merge(Json *ptOuter, Json *ptInner);
  bool menuAccesses(radialUser &d, string &e);
  bool monitorConfig(radialUser &d, string &e);
  bool monitorData(radialUser &d, string &e);
  bool monitorProcess(radialUser &d, string &e);
  bool monitorSystem(radialUser &d, string &e);
  bool monitorUpdate(radialUser &d, string &e);
  bool notifyPriorities(radialUser &d, string &e);
  bool packageTypes(radialUser &d, string &e);
  bool repo(radialUser &d, string &e);
  bool repos(radialUser &d, string &e);
  void rm(Json *ptJson, const string strField);
  bool sa(const string strKey, Json *ptData, string &strError);
  void schedule(string strPrefix);
  bool server(radialUser &d, string &e);
  bool serverAdd(radialUser &d, string &e);
  bool serverDetailsByApplicationID(radialUser &d, string &e);
  bool serverEdit(radialUser &d, string &e);
  bool serverGroup(radialUser &d, string &e);
  bool serverGroupAdd(radialUser &d, string &e);
  bool serverGroupRemove(radialUser &d, string &e);
  bool serverNotify(radialUser &d, string &e);
  bool serverRemove(radialUser &d, string &e);
  bool servers(radialUser &d, string &e);
  bool serversByApplicationID(radialUser &d, string &e);
  bool serversByGroupID(radialUser &d, string &e);
  bool serversByParentID(radialUser &d, string &e);
  bool serversByUserID(radialUser &d, string &e);
  bool serverUser(radialUser &d, string &e);
  bool serverUserAdd(radialUser &d, string &e);
  bool serverUserEdit(radialUser &d, string &e);
  bool serverUserRemove(radialUser &d, string &e);
  bool serverUsersByServerID(radialUser &d, string &e);
  bool sr(const string strKey, Json *ptData, string &strError);
  bool userAdd(radialUser &d, string &e);
  bool userEdit(radialUser &d, string &e);
  bool userNotify(radialUser &d, string &e);
  bool userReminder(radialUser &d, string &e);
  bool userReminderAdd(radialUser &d, string &e);
  bool userReminderEdit(radialUser &d, string &e);
  bool userReminderRemove(radialUser &d, string &e);
  bool userReminders(radialUser &d, string &e);
  bool userRemove(radialUser &d, string &e);
  bool users(radialUser &d, string &e);

  public:
  Central(string, int argc, char **argv, void (*pCallback)(string, const string, const bool));
  ~Central();
  void autoMode(string strPrefix, const string strOldMaster, const string strNewMaster);
  void callback(string strPrefix, const string strPacket, const bool bResponse);
  void setCallbackAddon(bool (*pCallback)(const string, radialUser &, string &, bool &));
};
// }}}
}
}
#endif
